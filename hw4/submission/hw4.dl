/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)
p1(x,d) :- parent_child("Priscilla",x), person(x,d).
p1(x,d) :- parent_child(y,x), p1(y,_), person(x,d).

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl M(m:PersonType, c:number)
.decl F(f:PersonType, c:number)
.decl Max(x:PersonType, maxc:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)
M(m,c) :- male(m), c = count : {parent_child(m,_)}.
F(f,c) :- female(f), c = count : {parent_child(f,_)}.
Max(x,maxc) :- maxc = max c : {F(_,c)}, F(x, maxc).
Max(x,maxc) :- maxc = max c : {M(_,c)}, M(x, maxc).
p2(x,d,m) :- person(x,d), Max(x,m).

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
.decl G(x:PersonType, g:number)
.decl hasParent(x:PersonType)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

hasParent(x) :- parent_child(_,x).
G(x,0) :- person(x,_), !hasParent(x).
G(x,n+1) :- parent_child(y,x), G(y,n).
p3(x,m1,m2) :- G(x,_), m1 = min g : {G(x,g)}, m2 = max g : {G(x,g)}, person_living(x).



/************* problem 4 **************/
.decl p4(x:PersonType)
.decl MA(x:PersonType, y:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)
MA(x,y) :- female(y), parent_child(y,x), person_living(x).
MA(x,z) :- MA(x,y), female(z), parent_child(z,y).
p4(x) :- MA(_,x), c1 = count : {MA(_,x)}, c2 = count : {person_living(_)}, c1 = c2.

/************* problem 5 **************/
.decl T(x:PersonType, ma:number)
.decl p5(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)
T(x,ma) :- ma = max g : {G(x,g), p4(x)}, G(x,ma), p4(x).
p5(x) :- ma = max g : {T(_,g)}, T(x,ma).
